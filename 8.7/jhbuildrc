# -*- mode: python -*-
# -*- coding: utf-8 -*-

# get the directory this source is in ... we assume we are always run in this
# directory
basedir = os.getcwd()

# checkoutroot: path to download packages elsewhere
# prefix:       target path to install the compiled binaries
# jhbuild hates relative paths, sadly
checkoutroot = os.path.join(basedir, 'checkout')
prefix = os.path.join(basedir, 'inst')
os.environ['prefix'] = prefix

# what module set should be used.  The default can be found in
# jhbuild/defaults.jhbuildrc, but can be any file in the modulesets directory
# or a URL of a module set file on a web server.
moduleset = 'vips.modules'

# HOST ... the thing that will run the executable we generate
# BUILD ... the thing doing the compiling
# TARGET ... complicated, but same as host
os.environ['BUILD'] = 'x86_64-pc-linux-gnu'
os.environ['HOST'] = 'x86_64-w64-mingw32'
os.environ['TARGET'] = 'x86_64-w64-mingw32'

# try to stop our enclosing pkg path getting in
# basedir/lib/pkgconfig is added for us later
os.environ['PKG_CONFIG_PATH'] = ''
addpath('PKG_CONFIG_PATH', os.path.join(prefix, 'lib', 'pkgconfig'))

# pkg-config will always look in PKG_CONFIG_LIBDIR (by default 
# /usr/lib/pkgconfig) after searching PKG_CONFIG_PATH ... we need to stop this
# or it'll see host .pc files
os.environ['PKG_CONFIG_LIBDIR'] = os.path.join(prefix, 'lib', 'pkgconfig')

# .pc files from binary packages have something like 
#     prefix=c:/devel/target/f3002dbeeb43fd4ea5385fb6fa4de06f
# at the top ... we need to override this prefix with our own
# don't use "--define-variable=prefix=/poop", some pkg-config get confused
os.environ['PKG_CONFIG'] = '/usr/bin/pkg-config --define-variable prefix=' + prefix

# comment these two out or we get pkg-config errors, investigate
# pkg-config will always search $libdir, usually /usr/lib/pkgconfig -- we want
# to stop it seeing any host packages, so turn this off
#os.environ['PKG_CONFIG_LIBDIR'] = ''
#addpath('PKG_CONFIG_LIBDIR', os.path.join(prefix, 'lib', 'pkgconfig'))

# Prefix for all the tools
# mingw-w64 on debian uses this:
mingw_tool_prefix = 'x86_64-w64-mingw32-'

mingw_tools = {
	'ADDR2LINE': 'addr2line',
	'AS': 'as', 
	'CC': 'gcc-win32', 
	'CPP': 'cpp-win32',
	'CPPFILT': 'c++filt', 
	'CXX': 'g++-win32',
	'DLLTOOL': 'dlltool', 
	'DLLWRAP': 'dllwrap',
	'GCOV': 'gcov-win32', 
	'LD': 'ld', 
	'NM': 'nm',
	'OBJCOPY': 'objcopy', 
	'OBJDUMP': 'objdump',
	'READELF': 'readelf', 
	'SIZE': 'size',
	'STRINGS': 'strings', 
	'WINDRES': 'windres',
	'AR': 'ar', 
	'RANLIB': 'ranlib', 
	'STRIP': 'strip'
}

# Exporting all as environment variables with its prefix
mingw_tools_args = str()
for tool in mingw_tools.keys():
	fullpath_tool = mingw_tool_prefix + mingw_tools[tool]
	os.environ[tool] = fullpath_tool

# Added another common env var name for windres
os.environ['RC'] = os.environ['WINDRES']

# Exporting tool flags enviroment variables
os.environ['LDFLAGS']  = '-L'+prefix+'/lib'
os.environ['CFLAGS']   = '-mms-bitfields -march=x86-64 -I'+prefix+'/include'
os.environ['CPPFLAGS'] = '-I'+prefix+'/include'
os.environ['CXXFLAGS'] = '-mms-bitfields -march=x86-64'
os.environ['ARFLAGS']  = '-ar rcs'

# turn on the optimiser
os.environ['CFLAGS']   += ' -O2 '
os.environ['CXXFLAGS']   += ' -O2 '

# turn on debugging
#os.environ['CFLAGS']   += ' -g '
#os.environ['CXXFLAGS']   += ' -g '

# Populating autogenargs
autogenargs  = ' --build='+os.environ['BUILD']
autogenargs += ' --host='+os.environ['HOST']
autogenargs += ' --target='+os.environ['TARGET']
autogenargs += ' --disable-debug'
autogenargs += ' --enable-all-warnings --enable-maintainer-mode'

for tool in ('AR', 'RANLIB', 'STRIP', 'AS',
	     'DLLTOOL', 'OBJDUMP', 'NM', 'WINDRES'):
	autogenargs += ' '+tool+'="'+os.environ[tool]+'" '

# fetch modules from this dir ... in fact, we just use the 'vips.modules'
# file
modulesets_dir = basedir

# we just want the local ones
use_local_modulesets = True

# only rebuild on a change
build_policy = "updated-deps"

# Show a tray icon using zenity
notrayicon = True

# whether not to emit notifications through the notification daemon
nonotify = True 

# trim jhbuild's default parallelisation down ... it uses 2x#cores jobs, which
# can actually melt some hardware
makeargs = '-j1'

use_ninja = False

# we want to force in-tree builds ... some packages (like matio) break with 
# out of tree builds
buildroot = None
